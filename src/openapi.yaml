openapi: 3.0.1
info:
  title: ZeroNetworks
  version: 1.0.2
servers:
  - url: 'https://portal.zeronetworks.com/api/v1'
paths:
  /activities/network:
    get:
      operationId: NetworkActivities_List
      tags:
        - Activities
      summary: Network Activities
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/cursorParameter'
        - $ref: '#/components/parameters/searchParameter'
        - $ref: '#/components/parameters/entityIdQueryParameter'
        - $ref: '#/components/parameters/fromParameter'
        - $ref: '#/components/parameters/toParameter'
        - $ref: '#/components/parameters/orderParameter'
        - $ref: '#/components/parameters/filtersParameter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/activitiesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /activities/network/export:
    post:
      operationId: NetworkActivities_Export
      tags:
        - Activities
      summary: Export network activities
      requestBody:
        description: 'EntityId, from, to, search, filter or date time format for export'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exportBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exportId'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  '/activities/network/export/csv/{exportId}':
    get:
      operationId: NetworkActivitiesExport_Get
      tags:
        - Activities
      summary: Download network activities export
      parameters:
        - $ref: '#/components/parameters/exportIdParameter'
      responses:
        '200':
          description: OK
          content:
            text/csv:
              schema:
                type: object
                format: file
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /activities/network/filters:
    get:
      operationId: NetworkActivitiesFilters_List
      tags:
        - Activities
      summary: Get network activity filters
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /ai/next-batch:
    get:
      operationId: AINextBatch_Get
      tags:
        - Assets
      summary: AI Next Batch
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nextBatch'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /assets:
    get:
      operationId: Assets_List
      tags:
        - Assets
      summary: Assets
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assetList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /assets/export:
    post:
      operationId: Assets_Export
      tags:
        - Assets
      summary: Export assets
      requestBody:
        description: 'EntityId, from, to, search, filter or date time format for export'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exportBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exportId'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  '/assets/export/csv/{exportId}':
    get:
      operationId: AssetsExport_Export
      tags:
        - Assets
      summary: Download assets export
      parameters:
        - $ref: '#/components/parameters/exportIdParameter'
      responses:
        '200':
          description: OK
          content:
            text/csv:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /assets/filters:
    get:
      operationId: AssetsFilters_List
      tags:
        - Assets
      summary: Assets Filters
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /assets/linux:
    post:
      operationId: AssetsLinux_Create
      tags:
        - Assets
      summary: Create linux asset
      requestBody:
        description: 'Linux asset details'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/linuxBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assetIds'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /assets/monitored:
    get:
      operationId: AssetsMonitored_List
      tags:
        - Assets-Monitored
      summary: Monitored Assets
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assetList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /assets/monitored/filters:
    get:
      operationId: AssetsMonitoredFilters_List
      tags:
        - Assets-Monitored
      summary: Assets Filters
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /assets/protect:
    post:
      operationId: Assets_Protect
      tags:
        - Assets-Protected
      summary: Move asset from learning to protection
      requestBody:
        description: Array of assetIds to move to protection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assetBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
      x-codegen-request-body-name: body
  /assets/ot:
    get:
      operationId: AssetsOT_List
      tags:
        - Assets-OT/IoT
      summary: List OT Assets
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/filtersParameter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assetOtList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
    post:
      operationId: AssetsOT_Create
      tags:
        - Assets-OT/IoT
      summary: Create OT/IoT asset
      requestBody:
        description: Array of assetIds to move to protection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/otAssetBody'
            examples:
              example-1:
                value:
                  ipv4: 192.168.0.1
                  type: 4
                  displayName: string
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
      security:
        - api_key: []
      x-codegen-request-body-name: body
  /assets/ot/{assetId}:
    delete:
      operationId: AssetsOT_Delete
      tags:
        - Assets-OT/IoT
      summary: Remove an OT asset
      parameters:
        - name: assetId
          in: path
          description: The id of the asset
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /assets/ot/filters:
    get:
      operationId: AssetsOTFilters_List
      tags:
        - Assets-OT/IoT
      summary: Assets OT Filters
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /assets/ot/protect:
    post:
      operationId: AssetsOT_Protect
      tags:
        - Assets-OT/IoT
      summary: Protect OT/IoT assets
      requestBody:
        description: Array of assetIds to move to protection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assetBody'
            examples: {}
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
      x-codegen-request-body-name: body
  /assets/ot/unprotect:
    post:
      operationId: AssetsOT_Unprotect
      tags:
        - Assets-OT/IoT
      summary: Unprotect OT/IoT asset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assetBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
      x-codegen-request-body-name: body
  /assets/protect/validate:
    post:
      operationId: AssetsProtection_Validate
      tags:
        - Assets
      summary: Validate assets for protection
      requestBody:
        description: Array of assetIds to move to protection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assetBody'
            examples: {}
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /assets/protected:
    get:
      operationId: AssetsProtected_List
      tags:
        - Assets-Protected
      summary: Protected Assets
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assetList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /assets/protected/filters:
    get:
      operationId: AssetsProtectedFilters_List
      tags:
        - Assets-Protected
      summary: Assets Protected Filters
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /assets/queue:
    post:
      operationId: Assets_Queue
      tags:
        - Assets-Monitored
      summary: Move asset from monitored to learning
      requestBody:
        description: Array of assetIds to move to protection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/queueBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
      x-codegen-request-body-name: body
    put:
      operationId: Assets_ExtendQueue
      tags:
        - Assets-Learning
      summary: Extend asset learning period
      requestBody:
        description: Array of assetIds to move to protection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/queueExtendBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /assets/queued:
    get:
      operationId: AssetsQueued_List
      tags:
        - Assets-Learning
      summary: Assets in learning
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assetList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /assets/queued/filters:
    get:
      operationId: AssetsQueuedFilters_List
      tags:
        - Assets-Learning
      summary: Get asset filters for assets in learning
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /assets/searchId:
    get:
      operationId: Assets_Search
      tags:
        - Assets
      summary: Asset by FQDN
      parameters:
        - name: fqdn
          in: query
          schema:
            type: string
          example: laptoppc.domain.local
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assetId'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /assets/statistics:
    get:
      summary: ''
      operationId: AssetsStatistics_Get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assetsStatistics'
              examples:
                example-1:
                  value: {}
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      tags:
        - Assets
      security:
        - api_key: []
  /assets/states/statistics:
    get:
      summary: AssetsStatesStatistics_Get
      tags:
        - Assets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assetsStatesStatistics'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: AssetsStatesStatistics_Get
      security:
        - api_key: []
  /assets/unprotect:
    post:
      operationId: Assets_Unprotect
      tags:
        - Assets-Protected
      summary: Unprotect asset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assetBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
      x-codegen-request-body-name: body
  /assets/unprotect/validate:
    post:
      operationId: AssetsUnprotect_Validate
      tags:
        - Assets-Protected
      summary: Validate assets for removing from protection
      requestBody:
        description: Array of assetIds to remove from protection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assetBody'
            examples: {}
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /audit:
    get:
      operationId: Audits_List
      tags:
        - Audit
      summary: Audit Logs
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/cursorParameter'
        - $ref: '#/components/parameters/searchParameter'
        - $ref: '#/components/parameters/entityIdQueryParameter'
        - $ref: '#/components/parameters/fromParameter'
        - $ref: '#/components/parameters/toParameter'
        - $ref: '#/components/parameters/orderParameter'
        - $ref: '#/components/parameters/filtersParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auditList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /audit/export:
    post:
      operationId: Audits_Export
      tags:
        - Audit
      summary: Export audit log
      requestBody:
        description: 'EntityId, from, to, search, filter or date time format for export'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exportBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exportId'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  '/audit/export/csv/{exportId}':
    get:
      operationId: AuditExport_Get
      tags:
        - Audit
      summary: Download audit export
      parameters:
        - $ref: '#/components/parameters/exportIdParameter'
      responses:
        '200':
          description: OK
          content:
            text/csv:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /audit/filters:
    get:
      operationId: AuditsFilters_List
      tags:
        - Audit
      summary: Audit Filters
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /entities/encode-ip:
    get:
      operationId: Entity_EncodeIP
      tags:
        - Entity
      summary: Encode IP to Asset
      parameters:
        - $ref: '#/components/parameters/ipParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /entities/encode-ip-range:
    get:
      operationId: Entity_EncodeIPRange
      tags:
        - Entity
      summary: Encode IP range
      parameters:
        - $ref: '#/components/parameters/ipRangeParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
              examples:
                example-1:
                  value:
                    id: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
              examples:
                example-1:
                  value:
                    error: string
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /entities/encode-subnet:
    get:
      operationId: Entity_EncodeSubnet
      tags:
        - Entity
      summary: Encode IP to Asset
      parameters:
        - $ref: '#/components/parameters/ipSubnetParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  '/entity/{entityId}':
    get:
      operationId: Entity_Get
      tags:
        - Entity
      summary: Get an entity
      parameters:
        - $ref: '#/components/parameters/entityIdParameter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  '/entity/{entityId}/ancestors':
    get:
      operationId: EntityMemberOf_Get
      tags:
        - Entity
      summary: Get an entity ancestors
      parameters:
        - $ref: '#/components/parameters/entityIdParameter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ancestors'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  '/entity/{entityId}/analysis':
    get:
      operationId: EntityAnalysis_Get
      tags:
        - Entity
      summary: Get an entity analysis
      parameters:
        - $ref: '#/components/parameters/entityIdParameter'
        - $ref: '#/components/parameters/sortParameter'
        - $ref: '#/components/parameters/directionParameter'
        - $ref: '#/components/parameters/connectionStateParameter'
        - $ref: '#/components/parameters/fromParameter'
        - $ref: '#/components/parameters/toParameter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityAnalysis'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  '/entity/{entityId}/analysis/export':
    post:
      operationId: EntityAnalysis_Export
      tags:
        - Entity
      summary: Export entity analysis
      parameters:
        - $ref: '#/components/parameters/entityIdParameter'
      requestBody:
        description: 'EntityId, from, to, search, filter or date time format for export'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exportBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exportId'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  '/entity/{entityId}/analysis/export/csv/{exportId}':
    get:
      operationId: EntityAnalysisExport_Get
      tags:
        - Entity
      summary: Download entity analysis report
      parameters:
        - $ref: '#/components/parameters/exportIdParameter'
        - $ref: '#/components/parameters/entityIdParameter'
      responses:
        '200':
          description: OK
          content:
            text/csv:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /environments/deployments:
    get:
      operationId: TrustServers_List
      tags:
        - Settings
      summary: List trust server deployments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deploymentsList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /groups:
    get:
      operationId: Groups_List
      tags:
        - Groups
      summary: Groups
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/searchParameter'
        - $ref: '#/components/parameters/filtersParameter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupsList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
      security:
        - api_key: []
  /groups/export:
    post:
      operationId: Groups_Export
      tags:
        - Groups
      summary: Export groups
      requestBody:
        description: 'EntityId, from, to, search, filter or date time format for export'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exportBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exportId'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  '/groups/export/csv/{exportId}':
    get:
      operationId: GroupsExport_Get
      tags:
        - Groups
      summary: Download assets export
      parameters:
        - $ref: '#/components/parameters/exportIdParameter'
      responses:
        '200':
          description: OK
          content:
            text/csv:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /groups/ad:
    get:
      operationId: ADGroups_List
      tags:
        - Groups-ActiveDirectory
      summary: Groups
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/searchParameter'
        - $ref: '#/components/parameters/filtersParameter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupsList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
      security:
        - api_key: []
  /groups/custom:
    get:
      operationId: CustomGroups_List
      tags:
        - Groups-Custom
      summary: Groups
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/searchParameter'
        - $ref: '#/components/parameters/filtersParameter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupsList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
      security:
        - api_key: []
    post:
      operationId: CustomGroups_Create
      tags:
        - Groups-Custom
      summary: Groups
      requestBody:
        description: Protection Policy properties
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customGroupBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '409':
          description: Already exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alreadyExistError'
      security:
        - api_key: []
  /groups/custom/filters:
    get:
      operationId: CustomGroupsFilters_Get
      tags:
        - Groups-Custom
      summary: Get filters for custom groups
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  '/groups/custom/{groupId}':
    put:
      operationId: CustomGroups_Update
      tags:
        - Groups-Custom
      summary: Groups
      parameters:
        - $ref: '#/components/parameters/groupIdParameter'
      requestBody:
        description: Custom Group properties
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customGroupBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
      security:
        - api_key: []
    delete:
      operationId: CustomGroups_Delete
      tags:
        - Groups-Custom
      summary: Groups
      parameters:
        - name: groupId
          in: path
          description: custom group id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
      security:
        - api_key: []
  /groups/custom/member-candidates:
    get:
      operationId: CustomGroupsCandidates_List
      tags:
        - Groups-Custom
      summary: Groups
      parameters:
        - name: groupId
          in: query
          description: custom group id
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupsList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
      security:
        - api_key: []
  '/groups/custom/{groupId}/members':
    put:
      operationId: CustomGroupsMembers_Add
      tags:
        - Groups-Custom
      summary: Groups
      parameters:
        - $ref: '#/components/parameters/groupIdParameter'
      requestBody:
        description: Custom Group Members properties
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customGroupMembersBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
      security:
        - api_key: []
    delete:
      operationId: CustomGroupsMembers_Delete
      tags:
        - Groups-Custom
      summary: Groups
      parameters:
        - $ref: '#/components/parameters/groupIdParameter'
      requestBody:
        description: Custom Group Members properties
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customGroupMembersBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
      security:
        - api_key: []
  /groups/filters:
    get:
      operationId: GroupsFilters_List
      tags:
        - Groups
      summary: Get groups filters
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /groups/statistics:
    get:
      summary: Group statistics
      tags:
        - Groups
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupsStatistics'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: GroupsStatistics_Get
      security:
        - api_key: []
  /groups/successors/filters:
    get:
      operationId: GroupsSuccessorsFilters_List
      tags:
        - Groups
      summary: Get groups successors filters
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /groups/system:
    get:
      operationId: SystemGroups_List
      tags:
        - Groups-System
      summary: Groups
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupsList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
      security:
        - api_key: []
  /groups/system/filters:
    get:
      operationId: SystemGroupsFilters_Get
      tags:
        - Groups-System
      summary: Get system groups filters
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /groups/tag:
    get:
      operationId: TagGroups_List
      tags:
        - Groups-Tags
      summary: List tags groups
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/searchParameter'
        - $ref: '#/components/parameters/filtersParameter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupsList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
      security:
        - api_key: []
  /groups/tag/filters:
    get:
      operationId: TagGroupsFilters_List
      tags:
        - Groups-Tags
      summary: Get tags groups filters
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  '/groups/{groupId}/successors':
    get:
      operationId: GroupsMembers_List
      tags:
        - Groups
      summary: Groups
      parameters:
        - $ref: '#/components/parameters/groupIdParameter'
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/includeNestedMembersQueryParameter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entitiesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/protection-policies:
    get:
      operationId: ProtectionPolicies_List
      tags:
        - Protection Policies
      summary: Get protection policies
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/protectionPoliciesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
    post:
      operationId: ProtectionPolicies_Create
      tags:
        - Protection Policies
      summary: Add protection policy
      requestBody:
        description: Protection Policy properties
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/protectionPolicyBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/protectionPolicyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  '/protection/protection-policies/{protectionPolicyId}':
    delete:
      operationId: ProtectionPolicies_Delete
      tags:
        - Protection Policies
      summary: Remove protection policy
      parameters:
        - name: protectionPolicyId
          in: path
          description: The id of the protection policy
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
    put:
      operationId: ProtectionPolicies_Update
      tags:
        - Protection Policies
      summary: Update protection policy
      parameters:
        - name: protectionPolicyId
          in: path
          description: The id of the protection policy
          required: true
          schema:
            type: string
      requestBody:
        description: Protection Policy properties
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/protectionPolicyUpdateBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/protectionPolicyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/protection-policies/group-candidates:
    get:
      operationId: ProtectionPoliciesGroupCandidates_List
      tags:
        - Protection Policies
      summary: Get groups for protection policy
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupCandidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/distribution:
    get:
      summary: MFA distribution
      tags:
        - MFA
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reactivePolicyDistribution'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: MFAPoliciesDistribution_List
      security:
        - api_key: []
  /protection/reactive-policies/statistics:
    get:
      summary: Get MFA statistics
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reactivePoliciesStatistics'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: MFAPoliciesStatistics_List
      tags:
        - MFA
      description: ''
      security:
        - api_key: []
  /protection/reactive-policies/inbound:
    get:
      operationId: MFAInboundPolicies_List
      tags:
        - MFA-Inbound
      summary: Get MFA rules
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/filtersParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reactivePolicyList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
    post:
      operationId: MFAInboundPolicies_Create
      tags:
        - MFA-Inbound
      summary: Add MFA rule
      requestBody:
        description: Rule properties
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reactivePolicyBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reactivePolicyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
      x-codegen-request-body-name: body
  '/protection/reactive-policies/inbound/{reactivePolicyId}':
    get:
      operationId: MFAInboundPolicies_Get
      tags:
        - MFA-Inbound
      summary: Get an inbound MFA policy
      parameters:
        - $ref: '#/components/parameters/reactivePolicyIdParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reactivePolicyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
    put:
      operationId: MFAInboundPolicies_Update
      tags:
        - MFA-Inbound
      summary: Update MFA block rule
      parameters:
        - $ref: '#/components/parameters/reactivePolicyIdParameter'
      requestBody:
        description: Rule properties
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reactivePolicyBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reactivePolicyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
      x-codegen-request-body-name: body
    delete:
      operationId: MFAInboundPolicies_Delete
      tags:
        - MFA-Inbound
      summary: Remove MFA rule
      parameters:
        - name: reactivePolicyId
          in: path
          description: The id of the rule
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/inbound/dst-candidates:
    get:
      operationId: MFAInboundPoliciesDestinationCandidates_List
      tags:
        - MFA-Inbound
      summary: Get destination assets for MFA rules
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/candidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/inbound/filters:
    get:
      operationId: MFAInboundPoliciesFilters_List
      tags:
        - MFA-Inbound
      summary: Get filters inbound MFA policies
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/inbound/filters/dst-candidates:
    get:
      operationId: MFAInboundPoliciesDestinationCandidatesFilters_List
      tags:
        - MFA-Inbound
      summary: Get filters inbound MFA policies destination candidates
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assetsFiltersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/inbound/filters/src-candidates:
    get:
      operationId: MFAInboundPoliciesSourceCandidatesFilters_List
      tags:
        - MFA-Inbound
      summary: Get filters inbound MFA policies source candidates
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assetsFiltersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/inbound/filters/src-users-candidates:
    get:
      operationId: MFAInboundPoliciesSourceUsersCandidatesFilters_List
      tags:
        - MFA-Inbound
      summary: Get filters inbound MFA policies source users
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assetsFiltersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/inbound/mfa-methods:
    get:
      operationId: MFAInboundPoliciesMFAMethods_List
      tags:
        - MFA-Inbound
      summary: Get destination assets for MFA rules
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reactivePolicyMethods'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/inbound/src-candidates:
    get:
      operationId: MFAInboundPoliciesSourceCandidates_List
      tags:
        - MFA-Inbound
      summary: Get source assets for MFA rules
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/candidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/inbound/src-users-candidates:
    get:
      operationId: MFAInboundPoliciesSourceUserCandidates_List
      tags:
        - MFA-Inbound
      summary: Get source users for MFA rules
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/srcUserCandidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/inbound/simulate:
    get:
      operationId: MFAInboundPolicies_Simulate
      tags:
        - MFA-Inbound
      summary: '*BETA* Simulate MFA access'
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/simulationParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orderedReactivePoliciesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/inbound/simulate/dst-candidates:
    get:
      operationId: MFAInboundPoliciesSimulateDestinationCandidates_List
      tags:
        - MFA-Inbound
      summary: Get destination assets for MFA simulation
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/candidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/inbound/simulate/src-candidates:
    get:
      operationId: MFAInboundPoliciesSimulateSourceCandidates_List
      tags:
        - MFA-Inbound
      summary: Get source assets for MFA simulation
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/candidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/inbound/simulate/src-users-candidates:
    get:
      operationId: MFAInboundPoliciesSimulateSourceUserCandidates_List
      tags:
        - MFA-Inbound
      summary: Get source users for MFA simulation
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/srcUserCandidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/outbound:
    get:
      operationId: MFAOutboundPolicies_List
      tags:
        - MFA-Outbound
      summary: Get outbound MFA policies
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/filtersParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reactivePolicyList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
    post:
      operationId: MFAOutboundPolicies_Create
      tags:
        - MFA-Outbound
      summary: Add MFA rule
      requestBody:
        description: Rule properties
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reactivePolicyBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reactivePolicyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
      x-codegen-request-body-name: body
  '/protection/reactive-policies/outbound/{reactivePolicyId}':
    get:
      operationId: MFAOutboundPolicies_Get
      tags:
        - MFA-Outbound
      summary: Get an inbound MFA policy
      parameters:
        - $ref: '#/components/parameters/reactivePolicyIdParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reactivePolicyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
    put:
      operationId: MFAOutboundPolicies_Update
      tags:
        - MFA-Outbound
      summary: Update outbound MFA policy
      parameters:
        - $ref: '#/components/parameters/reactivePolicyIdParameter'
      requestBody:
        description: Reactive Policy properties
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reactivePolicyBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reactivePolicyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
      x-codegen-request-body-name: body
    delete:
      operationId: MFAOutboundPolicies_Delete
      tags:
        - MFA-Outbound
      summary: Remove outbound MFA policy
      parameters:
        - name: reactivePolicyId
          in: path
          description: The id of the rule
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/outbound/dst-candidates:
    get:
      operationId: MFAOutboundPoliciesDestinationCandidates_List
      tags:
        - MFA-Outbound
      summary: Get destination assets for MFA outbound policy
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/candidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/outbound/filters:
    get:
      operationId: MFAOutboundPoliciesFilters_Get
      tags:
        - MFA-Outbound
      summary: Get filters outbound MFA policies
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/outbound/filters/dst-candidates:
    get:
      operationId: MFAOutboundPoliciesDestinationCandidatesFilters_List
      tags:
        - MFA-Outbound
      summary: Get filters inbound MFA policies destination candidates
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assetsFiltersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/outbound/filters/src-candidates:
    get:
      operationId: MFAOutboundPoliciesSourceCandidatesFilters_List
      tags:
        - MFA-Outbound
      summary: Get filters outbound MFA policies source candidates
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assetsFiltersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/outbound/filters/src-users-candidates:
    get:
      operationId: MFAOutboundPoliciesSourceUsersCandidatesFilters_List
      tags:
        - MFA-Outbound
      summary: Get filters outbound MFA policies source users
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assetsFiltersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/outbound/mfa-methods:
    get:
      operationId: MFAOutboundPoliciesMFAMethods_List
      tags:
        - MFA-Outbound
      summary: Get MFA methods for outbound policies
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reactivePolicyMethods'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/outbound/src-candidates:
    get:
      operationId: MFAOutboundPoliciesSourceCandidates_List
      tags:
        - MFA-Outbound
      summary: Get source assets for outbound MFA policies
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/candidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/outbound/src-users-candidates:
    get:
      operationId: MFAOutboundPoliciesSourceUserCandidates_List
      tags:
        - MFA-Outbound
      summary: Get source users for outbound MFA policies
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/srcUserCandidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/outbound/simulate:
    get:
      operationId: MFAOutboundPolicies_Simulate
      tags:
        - MFA-Outbound
      summary: 'Simulate outbound MFA access'
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/simulationParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orderedReactivePoliciesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/outbound/simulate/dst-candidates:
    get:
      operationId: MFAOutboundPoliciesSimulateDesinationCandidates_List
      tags:
        - MFA-Outbound
      summary: Get destination assets for outbound MFA simulation
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/candidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/outbound/simulate/src-candidates:
    get:
      operationId: MFAOutboundPoliciesSimulateSourceCandidates_List
      tags:
        - MFA-Outbound
      summary: Get source assets for outbound MFA simulation
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/candidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/reactive-policies/outbound/simulate/src-users-candidates:
    get:
      operationId: MFAOutboundPoliciesSimulateSourceUserCandidates_List
      tags:
        - MFA-Outbound
      summary: Get source users for outbound MFA simulation
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/srcUserCandidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/statistics:
    get:
      summary: Get rules statistics
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ruleStatistics'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: RulesStatistics_Get
      tags:
        - Rules
      description: ''
      security:
        - api_key: []
  '/protection/rules/distribution/{ruleId}':
    get:
      operationId: RulesDistribution_Get
      tags:
        - Rules
      summary: Get distribution of rule hit count
      parameters:
        - $ref: '#/components/parameters/ruleIdParameter'
        - $ref: '#/components/parameters/ruleDirectionParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ruleDistribution'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  '/protection/rules/history/{ruleId}':
    get:
      operationId: RulesHistory_Get
      tags:
        - Rules
      summary: Get a historic version of an inbound allow rule
      parameters:
        - $ref: '#/components/parameters/ruleIdParameter'
        - $ref: '#/components/parameters/updateIdParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/historyRule'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/inbound-allow:
    get:
      operationId: InboundAllowRules_List
      tags:
        - Rules-InboundAllow
      summary: Get open inbound rules
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/filtersParameter'
        - $ref: '#/components/parameters/entityParams'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rulesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
    post:
      operationId: InboundAllowRules_Create
      tags:
        - Rules-InboundAllow
      summary: Add open inbound rule
      requestBody:
        description: Rule properties
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ruleBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ruleResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
      x-codegen-request-body-name: body
  '/protection/rules/inbound-allow/{ruleId}':
    get:
      operationId: InboundAllowRule_Get
      tags:
        - Rules-InboundAllow
      summary: Get an inbound allow rule
      parameters:
        - $ref: '#/components/parameters/ruleIdParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ruleItem'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
    put:
      operationId: InboundAllowRule_Update
      tags:
        - Rules-InboundAllow
      summary: Update open inbound rule
      parameters:
        - $ref: '#/components/parameters/ruleIdParameter'
      requestBody:
        description: Rule properties
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ruleBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ruleResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
      x-codegen-request-body-name: body
    delete:
      operationId: InboundAllowRule_Delete
      tags:
        - Rules-InboundAllow
      summary: Remove open inbound rule
      parameters:
        - name: ruleId
          in: path
          description: The id of the rule
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/inbound-allow/filters:
    get:
      operationId: InboundAllowRulesFilters_List
      tags:
        - Rules-InboundAllow
      summary: Get filters for Inbound Allow rules
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/inbound-allow/excluded-local-candidates:
    get:
      operationId: InboundAllowRulesExcludedDestinationCandidates_List
      tags:
        - Rules-InboundAllow
      summary: Get destination assets that can be excluded for inbound allow
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/cursorParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/candidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/inbound-allow/local-candidates:
    get:
      operationId: InboundAllowRulesDestinationCandidates_List
      tags:
        - Rules-InboundAllow
      summary: Get destination assets for inbound allow
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/cursorParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/candidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/inbound-allow/filters/local-candidates:
    get:
      operationId: InboundAllowRulesDesinationCandidatesFilters_List
      tags:
        - Rules-InboundAllow
      summary: Get filters for destination assets in Inbound Allow rules
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/inbound-allow/remote-candidates:
    get:
      operationId: InboundAllowRulesSourceCandidates_List
      tags:
        - Rules-InboundAllow
      summary: Get source assets for inbound allow
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/cursorParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/candidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/inbound-allow/filters/remote-candidates:
    get:
      operationId: InboundAllowRulesSourceCandidatesFilters_List
      tags:
        - Rules-InboundAllow
      summary: Get filters for source assets in Inbound Allow rules
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/inbound-allow/export:
    post:
      operationId: InboundAllowRules_Export
      tags:
        - Rules-InboundAllow
      summary: Export inbound allow rules
      requestBody:
        description: 'EntityId, from, to, search, filter or date time format for export'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exportBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exportId'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  '/protection/rules/inbound-allow/export/csv/{exportId}':
    get:
      operationId: InboundAllowRulesExport_Get
      tags:
        - Rules-InboundAllow
      summary: Download inbound allow export
      parameters:
        - $ref: '#/components/parameters/exportIdParameter'
      responses:
        '200':
          description: OK
          content:
            text/csv:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/inbound-block:
    get:
      operationId: InboundBlockRules_List
      tags:
        - Rules-InboundBlock
      summary: Get inbound block rules
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/filtersParameter'
        - $ref: '#/components/parameters/entityParams'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rulesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
    post:
      operationId: InboundBlockRules_Create
      tags:
        - Rules-InboundBlock
      summary: Add inbound block rule
      requestBody:
        description: Rule properties
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ruleBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ruleResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
      x-codegen-request-body-name: body
  '/protection/rules/inbound-block/{ruleId}':
    get:
      operationId: InboundBlockRule_Get
      tags:
        - Rules-InboundBlock
      summary: Get an inbound block rule
      parameters:
        - $ref: '#/components/parameters/ruleIdParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ruleItem'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
    put:
      operationId: InboundBlockRule_Update
      tags:
        - Rules-InboundBlock
      summary: Update inbound block rule
      parameters:
        - $ref: '#/components/parameters/ruleIdParameter'
      requestBody:
        description: Rule properties
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ruleBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ruleResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
      x-codegen-request-body-name: body
    delete:
      operationId: InboundBlockRule_Delete
      tags:
        - Rules-InboundBlock
      summary: Remove inbound block rule
      parameters:
        - name: ruleId
          in: path
          description: The id of the rule
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/inbound-block/filters:
    get:
      operationId: InboundBlockRulesFilters_Get
      tags:
        - Rules-InboundBlock
      summary: Get filters for Inbound Block rules
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/inbound-block/excluded-local-candidates:
    get:
      operationId: InboundBlockRulesExcludedLocalCandidates_List
      tags:
        - Rules-InboundBlock
      summary: Get destination assets that can be excluded for inbound block
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/cursorParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/candidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/inbound-block/local-candidates:
    get:
      operationId: InboundBlockRulesDestinationCandidates_List
      tags:
        - Rules-InboundBlock
      summary: Get destination assets for outbound block
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/candidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/inbound-block/filters/local-candidates:
    get:
      operationId: InboundBlockRulesDestinationCandidatesFilters_List
      tags:
        - Rules-InboundBlock
      summary: Get filters for destination assets in Inbound Block rules
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/inbound-block/remote-candidates:
    get:
      operationId: InboundBlockRulesSourceCandidates_List
      tags:
        - Rules-InboundBlock
      summary: Get source assets for outbound block
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/cursorParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/candidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/inbound-block/filters/remote-candidates:
    get:
      operationId: InboundBlockRulesSourceCandidatesFilters_List
      tags:
        - Rules-InboundBlock
      summary: Get filters for source assets in Inbound Block rules
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/inbound-block/export:
    post:
      operationId: InboundBlockRules_Export
      tags:
        - Rules-InboundBlock
      summary: Export inbound block rules
      requestBody:
        description: 'EntityId, from, to, search, filter or date time format for export'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exportBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exportId'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  '/protection/rules/inbound-block/export/csv/{exportId}':
    get:
      operationId: InboundBlockRulesExport_Get
      tags:
        - Rules-InboundBlock
      summary: Download inbound block export
      parameters:
        - $ref: '#/components/parameters/exportIdParameter'
      responses:
        '200':
          description: OK
          content:
            text/csv:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/outbound-block:
    get:
      operationId: OutboundBlockRules_List
      tags:
        - Rules-OutboundBlock
      summary: Get outbound block rules
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/filtersParameter'
        - $ref: '#/components/parameters/entityParams'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rulesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
    post:
      operationId: OutboundBlockRules_Create
      tags:
        - Rules-OutboundBlock
      summary: Add outbound block rule
      requestBody:
        description: Rule properties
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ruleBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ruleResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
      x-codegen-request-body-name: body
  '/protection/rules/outbound-block/{ruleId}':
    get:
      operationId: OutboundBlockRule_Get
      tags:
        - Rules-OutboundBlock
      summary: Get an outbound block rule
      parameters:
        - $ref: '#/components/parameters/ruleIdParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ruleItem'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
    put:
      operationId: OutboundBlockRule_Update
      tags:
        - Rules-OutboundBlock
      summary: Update outbound block rule
      parameters:
        - $ref: '#/components/parameters/ruleIdParameter'
      requestBody:
        description: Rule properties
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ruleBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ruleResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
      x-codegen-request-body-name: body
    delete:
      operationId: OutboundBlockRule_Delete
      tags:
        - Rules-OutboundBlock
      summary: Remove outbound block rule
      parameters:
        - name: ruleId
          in: path
          description: The id of the rule
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/outbound-block/filters:
    get:
      operationId: OutboundBlockRulesFilters_List
      tags:
        - Rules-OutboundBlock
      summary: Get filters for Outbound Block rules
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/outbound-block/excluded-local-candidates:
    get:
      operationId: OutboundBlockRulesExcludedSourceCandidates_List
      tags:
        - Rules-OutboundBlock
      summary: Get source assets that can be excluded for outbound block
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/cursorParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/candidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/outbound-block/filters/excluded-local-candidates:
    get:
      operationId: OutboundBlockRulesExcludedCandidatesFilters_List
      tags:
        - Rules-OutboundBlock
      summary: Get filters for excluded source assets in Outbound Block rules
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/outbound-block/local-candidates:
    get:
      operationId: OutboundBlockRulesSourceCandidates_List
      tags:
        - Rules-OutboundBlock
      summary: Get source assets for outbound block
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/cursorParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/candidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/outbound-block/filters/local-candidates:
    get:
      operationId: OutboundBlockRulesSourceCandidatesFilters_List
      tags:
        - Rules-OutboundBlock
      summary: Get filters for source assets in Outbound Block rules
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/outbound-block/remote-candidates:
    get:
      operationId: OutboundBlockRulesDestinationCandidates_List
      tags:
        - Rules-OutboundBlock
      summary: Get destination assets for outbound block
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/cursorParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/candidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/outbound-block/filters/remote-candidates:
    get:
      operationId: OutboundBlockRulesDestinationCandidatesFilters_List
      tags:
        - Rules-OutboundBlock
      summary: Get filters for destination assets in Outbound Block rules
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/outbound-block/export:
    post:
      operationId: OutboundBlockRules_Export
      tags:
        - Rules-OutboundBlock
      summary: Export outbound block rules
      requestBody:
        description: 'EntityId, from, to, search, filter or date time format for export'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exportBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exportId'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  '/protection/rules/outbound-block/export/csv/{exportId}':
    get:
      operationId: OutboundBlockRulesExport_Get
      tags:
        - Rules-OutboundBlock
      summary: Download outbound block export
      parameters:
        - $ref: '#/components/parameters/exportIdParameter'
      responses:
        '200':
          description: OK
          content:
            text/csv:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/outbound:
    get:
      operationId: OutboundAllowRules_List
      tags:
        - Rules-OutboundAllow
      summary: Get outbound rules
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/filtersParameter'
        - $ref: '#/components/parameters/entityParams'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rulesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
    post:
      operationId: OutboundAllowRules_Create
      tags:
        - Rules-OutboundAllow
      summary: Add outbound rule
      requestBody:
        description: Rule properties
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ruleBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ruleResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
      x-codegen-request-body-name: body
  '/protection/rules/outbound/{ruleId}':
    get:
      operationId: OutboundAllowRule_Get
      tags:
        - Rules-OutboundAllow
      summary: Get an outbound rule
      parameters:
        - $ref: '#/components/parameters/ruleIdParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ruleItem'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
    put:
      operationId: OutboundAllowRule_Update
      tags:
        - Rules-OutboundAllow
      summary: Update outbound rule
      parameters:
        - $ref: '#/components/parameters/ruleIdParameter'
      requestBody:
        description: Rule properties
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ruleBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ruleResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
      x-codegen-request-body-name: body
    delete:
      operationId: OutboundAllowRule_Delete
      tags:
        - Rules-OutboundAllow
      summary: Remove outbound rule
      parameters:
        - name: ruleId
          in: path
          description: The id of the rule
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/outbound/filters:
    get:
      operationId: OutboundAllowRulesFilters_List
      tags:
        - Rules-OutboundAllow
      summary: Get filters for Outbound Allow rules
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/outbound/excluded-local-candidates:
    get:
      operationId: OutboundAllowRulesExcludedSourceCandidates_List
      tags:
        - Rules-OutboundAllow
      summary: Get source assets that can be excluded for outbound block
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/cursorParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/candidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/outbound/local-candidates:
    get:
      operationId: OutboundAllowRulesSourceCandidates_List
      tags:
        - Rules-OutboundAllow
      summary: Get source assets for outbound
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/cursorParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/candidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/outbound/filters/local-candidates:
    get:
      operationId: OutboundAllowRulesSourceCandidatesFilters_List
      tags:
        - Rules-OutboundAllow
      summary: Get filters for source assets in Outbound Allow rules
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/outbound/remote-candidates:
    get:
      operationId: OutboundAllowRulesDestinationCandidates_List
      tags:
        - Rules-OutboundAllow
      summary: Get destination assets for outbound
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/cursorParameter'
        - $ref: '#/components/parameters/searchParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/candidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/outbound/filters/remote-candidates:
    get:
      operationId: OutboundAllowRulesDestinationCandidatesFilters_List
      tags:
        - Rules-OutboundAllow
      summary: Get filters for destination assets in Outbound Allow rules
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /protection/rules/outbound/export:
    post:
      operationId: OutboundAllowRules_Export
      tags:
        - Rules-OutboundAllow
      summary: Export outbound rules
      requestBody:
        description: 'EntityId, from, to, search, filter or date time format for export'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exportBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exportId'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  '/protection/rules/outbound/export/csv/{exportId}':
    get:
      operationId: OutboundAllowRulesExport_Get
      tags:
        - Rules-OutboundAllow
      summary: Download outbound export
      parameters:
        - $ref: '#/components/parameters/exportIdParameter'
      responses:
        '200':
          description: OK
          content:
            text/csv:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /roles:
    get:
      operationId: Roles_List
      tags:
        - Settings-Roles
      summary: List roles
      parameters:
        - $ref: '#/components/parameters/searchParameter'
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/cursorParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rolesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /roles/candidates:
    get:
      operationId: RolesCandidates_List
      tags:
        - Settings-Roles
      summary: List candidates for roles
      parameters:
        - $ref: '#/components/parameters/searchParameter'
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/cursorParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roleCandidatesList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  '/roles/{roleEntityId}':
    post:
      operationId: Roles_Create
      tags:
        - Settings-Roles
      summary: Add role
      parameters:
        - $ref: '#/components/parameters/roleEntityIdParameter'
      requestBody:
        description: Role properties
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roleBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
      x-codegen-request-body-name: body
    delete:
      operationId: Roles_Delete
      tags:
        - Settings-Roles
      summary: Remove role
      parameters:
        - $ref: '#/components/parameters/roleEntityIdParameter'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/emptyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /users:
    get:
      operationId: Users_List
      tags:
        - Users
      summary: Users
      parameters:
        - $ref: '#/components/parameters/limitParameter'
        - $ref: '#/components/parameters/offsetParameter'
        - $ref: '#/components/parameters/searchParameter'
        - $ref: '#/components/parameters/filtersParameter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /users/export:
    post:
      operationId: Users_Export
      tags:
        - Users
      summary: Export users
      requestBody:
        description: 'EntityId, from, to, search, filter or date time format for export'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exportBody'
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exportId'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  '/users/export/csv/{exportId}':
    get:
      operationId: UsersExport_Get
      tags:
        - Users
      summary: Download users export
      parameters:
        - $ref: '#/components/parameters/exportIdParameter'
      responses:
        '200':
          description: OK
          content:
            text/csv:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /users/filters:
    get:
      operationId: UsersFilters_List
      tags:
        - Users
      summary: Get users filters
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filtersList'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiError'
      security:
        - api_key: []
  /users/statistics:
    get:
      summary: User statistics
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userStatistics'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
      operationId: UserStatistics_Get
      tags:
        - Users
      description: ''
      security:
        - api_key: []
  /settings/auth:
    get:
      summary: Get portal session timeout setting
      tags:
        - Settings-PortalSecurity
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/settingsAuthBody'
      operationId: SettingsAuth_Get
      description: Get the portal security settings
      security:
        - api_key: []
    put:
      summary: Set portal session timeout setting
      operationId: SettingsAuth_Put
      tags:
        - Settings-PortalSecurity
      responses:
        '200':
          description: OK
      description: Set the portal security settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/settingsAuthBody'
      security:
        - api_key: []
components:
  schemas:
    idNamePair:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    timestamp:
      type: integer
      description: epoch timestamp
      format: int64
    ruleMatch:
      type: object
      properties:
        ruleId:
          type: string
        updateId:
          type: number
    activitiesList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/activity'
        scrollCursor:
          type: string
    activity:
      type: object
      properties:
        dst:
          type: object
          properties:
            assetId:
              type: string
            assetProtectionState:
              type: integer
            assetSrc:
              type: integer
            assetType:
              type: integer
            eventRecordId:
              type: integer
            fqdn:
              type: string
            ip:
              type: string
            port:
              type: integer
            processId:
              type: string
            processName:
              type: string
            processPath:
              type: string
            userId:
              type: string
            userName:
              type: string
            inboundRuleMatches:
              type: array
              items:
                $ref: '#/components/schemas/ruleMatch'
            outboundRuleMatches:
              type: array
              items:
                $ref: '#/components/schemas/ruleMatch'
        protocol:
          type: integer
        src:
          type: object
          properties:
            assetId:
              type: string
            assetProtectionState:
              type: integer
            assetSrc:
              type: integer
            assetType:
              type: integer
            eventRecordId:
              type: integer
            fqdn:
              type: string
            ip:
              type: string
            port:
              type: integer
            processId:
              type: string
            processName:
              type: string
            processPath:
              type: string
            userId:
              type: string
            userName:
              type: string
        state:
          type: integer
        timestamp:
          $ref: '#/components/schemas/timestamp'
        trafficType:
          type: integer
    ancestors:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/group'
    apiError:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
    asset:
      type: object
      properties:
        assetType:
          type: integer
          format: int32
          enum:
            - 0
            - 1
            - 2
        domain:
          type: string
          example: domain.local
        fqdn:
          type: string
          example: laptoppc.domain.local
        id:
          type: string
          example: 'a:a:6d020055'
        ipV4Addresses:
          type: array
          items:
            type: string
            example: 1.1.1.1
        ipV6Addresses:
          type: array
          items:
            type: string
        assetStatus:
          type: integer
          enum:
            - title: 'ASSET_STATUS_UNDISCOVERED,'
              const: 1
            - title: 'ASSET_STATUS_STALKED,'
              const: 2
            - title: 'ASSET_STATUS_DELETED,'
              const: 3
            - title: 'ASSET_STATUS_OS_UNSUPPORTED,'
              const: 4
            - title: 'ASSET_STATUS_TYPE_UNSUPPORTED,'
              const: 5
            - title: 'ASSET_STATUS_IGNORED,'
              const: 6
            - title: 'ASSET_STATUS_CLOUD_CONNECTOR,'
              const: 7
        managers:
          type: array
          items:
            $ref: '#/components/schemas/manager'
        name:
          type: string
          example: laptoppc
        operatingSystem:
          type: string
          example: Windows 10 Pro
        protectionState:
          type: integer
          format: int32
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
        source:
          type: integer
          format: int32
          enum:
            - 0
            - 1
            - 2
            - 3
        state:
          $ref: '#/components/schemas/state'
    assetOt:
      type: object
      properties:
        assetType:
          type: integer
          format: int32
        domain:
          type: string
          example: domain.local
        fqdn:
          type: string
          example: laptoppc.domain.local
        id:
          type: string
          example: 'a:a:6d020055'
        ipV4Addresses:
          type: array
          items:
            type: string
            example: 1.1.1.1
        ipV6Addresses:
          type: array
          items:
            type: string
        assetStatus:
          type: integer
          enum:
            - title: 'ASSET_STATUS_UNDISCOVERED,'
              const: 1
            - title: 'ASSET_STATUS_STALKED,'
              const: 2
            - title: 'ASSET_STATUS_DELETED,'
              const: 3
            - title: 'ASSET_STATUS_OS_UNSUPPORTED,'
              const: 4
            - title: 'ASSET_STATUS_TYPE_UNSUPPORTED,'
              const: 5
            - title: 'ASSET_STATUS_IGNORED,'
              const: 6
            - title: 'ASSET_STATUS_CLOUD_CONNECTOR,'
              const: 7
        name:
          type: string
          example: router
        operatingSystem:
          type: string
        protectionState:
          type: integer
          format: int32
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
        source:
          type: integer
          format: int32
    assetBody:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          items:
            type: string
    assetFilter:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    assetsFiltersList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/assetFilter'
    assetId:
      type: object
      properties:
        assetId:
          type: string
    assetIds:
      type: array
      items:
          $ref: '#/components/schemas/assetId'
    assetList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/asset'
        count:
          type: integer
    assetOtList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/assetOt'
    assetSummary:
      type: object
      properties:
        count:
          type: integer
        id:
          type: string
        name:
          type: string
    audit:
      type: object
      properties:
        auditType:
          type: integer
          format: int32
          enum:
            - 1
            - 2
            - 4
            - 5
            - 7
            - 8
            - 9
            - 10
            - 11
            - 12
            - 17
            - 18
            - 19
            - 20
            - 21
            - 22
            - 25
            - 26
            - 27
            - 28
            - 29
            - 30
            - 31
            - 32
            - 33
            - 34
            - 35
            - 36
        destinationEntitiesList:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
        details:
          type: string
        enforcementSource:
          type: integer
          description: '1=ReacticePolicy, 2=Automated, 3=AccessPortal, 4=AdminPortal, 5=AI, 6=API'
          format: int32
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
        performedBy:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
              example: User Name
        reportedObjectId:
          type: string
        timestamp:
          $ref: '#/components/schemas/timestamp'
        userRole:
          type: integer
          description: '1=Admin, 2=Viewer, 3=Regular, 4=API-FullAccess, 5=API-ReadOnly, 6=SelfService, 7=CloudConnectorProvisioning'
          format: int32
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
    auditList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/audit'
        scrollCursor:
          type: string
    alreadyExistError:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
    authError:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
    byAsset:
      type: object
      properties:
        occurred:
          type: integer
        lastTimeSeen:
          type: string
        aggregation:
          type: object
          properties:
            count:
              type: integer
            id:
              type: string
            name:
              type: string
        ports:
          type: array
          items:
            $ref: '#/components/schemas/portSummary'
        users:
          type: array
          items:
            $ref: '#/components/schemas/userSummary'
        processes:
          type: array
          items:
            $ref: '#/components/schemas/processSummary'
        assets:
          type: array
          items:
            $ref: '#/components/schemas/assetSummary'
        connectionState:
          type: integer
    byProcess:
      type: object
      properties:
        occurred:
          type: integer
        lastTimeSeen:
          type: string
        aggregation:
          type: object
          properties:
            count:
              type: integer
            name:
              type: string
        assets:
          type: array
          items:
            $ref: '#/components/schemas/assetSummary'
        ports:
          type: array
          items:
            $ref: '#/components/schemas/portSummary'
        users:
          type: array
          items:
            $ref: '#/components/schemas/userSummary'
        processes:
          type: array
          items:
            $ref: '#/components/schemas/processSummary'
        connectionState:
          type: integer
    byPort:
      type: object
      properties:
        occurred:
          type: integer
        lastTimeSeen:
          type: string
        aggregation:
          type: object
          properties:
            count:
              type: integer
            port:
              type: object
              properties:
                protocol:
                  type: integer
                port:
                  type: integer
        assets:
          type: array
          items:
            $ref: '#/components/schemas/assetSummary'
        users:
          type: array
          items:
            $ref: '#/components/schemas/userSummary'
        processes:
          type: array
          items:
            $ref: '#/components/schemas/processSummary'
        ports:
          type: array
          items:
            $ref: '#/components/schemas/portSummary'
        connectionState:
          type: integer
    byUser:
      type: object
      properties:
        occurred:
          type: integer
        lastTimeSeen:
          type: string
        aggregation:
          type: object
          properties:
            count:
              type: integer
            id:
              type: string
            name:
              type: string
        assets:
          type: array
          items:
            $ref: '#/components/schemas/assetSummary'
        ports:
          type: array
          items:
            $ref: '#/components/schemas/portSummary'
        processes:
          type: array
          items:
            $ref: '#/components/schemas/processSummary'
        users:
          type: array
          items:
            $ref: '#/components/schemas/userSummary'
        connectionState:
          type: integer
    candidate:
      type: object
      properties:
        assetType:
          type: integer
        domain:
          type: string
        id:
          type: string
        name:
          type: string
        protectionState:
          type: integer
    candidatesList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/candidate'
        scrollCursor:
          type: string
    deployment:
      type: object
      properties:
        assetId:
          type: string
        id:
          type: string
        ipAddress:
          type: string
        defaultGateway:
          type: string
        dnsIPAddress:
          type: string
        name:
          type: string
        subnetMask:
          type: string
        status:
          type: integer
        state:
          type: integer
    deploymentsList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/deployment'
    distribution:
      type: object
      properties:
        timestamp:
          $ref: '#/components/schemas/timestamp'
        activitiesCount:
          type: integer
    emptyResponse:
      type: object
    entityAnalysis:
      type: object
      properties:
        items:
          type: object
          properties:
            counts:
              type: object
              properties:
                byProcess:
                  type: integer
                byUser:
                  type: integer
                byPort:
                  type: integer
                byAsset:
                  type: integer
            byAsset:
              type: array
              items:
                $ref: '#/components/schemas/byAsset'
            byUser:
              type: array
              items:
                $ref: '#/components/schemas/byUser'
            byProcess:
              type: array
              items:
                $ref: '#/components/schemas/byProcess'
            byPort:
              type: array
              items:
                $ref: '#/components/schemas/byPort'
            connectionState:
              type: integer
    entity:
      type: object
      anyOf:
        - $ref: '#/components/schemas/group'
        - $ref: '#/components/schemas/user'
        - $ref: '#/components/schemas/asset'
    entitiesList:
      type: object
      properties:
        entities:
          type: array
          items:
            $ref: '#/components/schemas/entity'
        count:
          type: integer
    entityResponse:
      type: object
      properties:
        entity:
          $ref: '#/components/schemas/entity'
    exportId:
      type: object
      properties:
        exportId:
          type: string
    exportBody:
      type: object
      properties:
        _search:
          type: string
        _filters:
          type: string
        assetDirection:
          type: string
        assetScope:
          type: string
        entityId:
          type: string
        from:
          type: integer
        localDateTimeFormat:
          type: string
          default: en-US
        to:
          type: integer
        userInfo:
          type: string
    filter:
      type: object
      properties:
        id:
          type: string
        type:
          type: integer
        name:
          type: string
        placeholder:
          type: string
        disableExcludeSupport:
          type: boolean
        enableBulkSelection:
          type: boolean
        allowedCharactersRegex:
          type: string
        selections:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
    filtersList:
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/filter'
        resolvedFilters:
          type: object
        hasActiveFiltersChanged:
          type: boolean
    groupCandidate:
      type: object
      properties:
        domain:
          type: string
        hasProtectionPolicy:
          type: boolean
        id:
          type: string
        name:
          type: string
    groupCandidatesList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/groupCandidate'
        scrollCursor:
          type: string
    group:
      type: object
      properties:
        createdAt:
          $ref: '#/components/schemas/timestamp'
        description:
          type: string
        directMembersCount:
          type: integer
        domain:
          type: string
        guid:
          type: string
        hasProtectionPolicy:
          type: boolean
        id:
          type: string
        name:
          type: string
        role:
          type: integer
          format: int32
        sid:
          type: string
        updatedAt:
          $ref: '#/components/schemas/timestamp'
    groupsList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/group'
    linuxBody:
      type: object
      required:
        - displayName
        - fqdn
      properties:
        displayName:
          type: string
          example: "linuxserver"
        fqdn:
          type: string
          example: "linuxserver.domain.local"
    manager:
      type: object
      properties:
        entityType:
          type: string
          enum:
            - user
        id:
          type: string
        name:
          type: string
          example: User Name
        permission:
          type: integer
          format: int32
    reactivePolicy:
      type: object
      properties:
        createdAt:
          $ref: '#/components/schemas/timestamp'
        createdBy:
          type: string
        createdByName:
          type: string
          example: User Name
        description:
          type: string
        dstEntityInfo:
          $ref: '#/components/schemas/idNamePair'
        dstPort:
          type: string
          example: '3389'
        dstProcessNames:
          type: array
          items:
            type: string
            example: 'c:\test.exe'
        fallbackToLoggedOnUser:
          type: boolean
        id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        mfaMethods:
          type: array
          items:
            type: integer
            description: '1=SMS, 2=Email, 3=Browser, 4=Duo'
            format: int32
            enum:
              - 1
              - 2
              - 3
              - 4
        protocolType:
          type: integer
          description: '6=TCP, 17=UDP'
          format: int32
          enum:
            - 6
            - 17
        ruleCreationMode:
          type: integer
          format: int32
        ruleDuration:
          type: integer
          format: int32
        srcEntityInfos:
          type: array
          items:
            $ref: '#/components/schemas/idNamePair'
        srcProcessNames:
          type: array
          items:
            type: string
            example: system
        srcUserInfos:
          type: array
          items:
            $ref: '#/components/schemas/idNamePair'
        state:
          type: integer
          description: '1=Enabled, 2=Disabled'
          enum:
            - 1
            - 2
        updatedAt:
          $ref: '#/components/schemas/timestamp'
    reactivePolicyBody:
      required:
        - dstEntityInfo
        - dstPort
        - dstProcessNames
        - fallbackToLoggedOnUser
        - mfaMethods
        - protocolType
        - ruleDuration
        - srcEntityInfos
        - srcProcessNames
        - srcUserInfos
      type: object
      properties:
        description:
          type: string
        dstEntityInfo:
          required:
            - id
          type: object
          properties:
              id:
                type: string
        dstPort:
          type: string
        dstProcessNames:
          type: array
          items:
            type: string
        fallbackToLoggedOnUser:
          type: boolean
        mfaMethods:
          type: array
          items:
            type: integer
        protocolType:
          type: integer
        ruleCreationMode:
          type: integer
        ruleDuration:
          type: integer
        srcEntityInfos:
          type: array
          items:
            required:
              - id
            type: object
            properties:
              id:
                type: string
        srcProcessNames:
          type: array
          items:
            type: string
        srcUserInfos:
          type: array
          items:
            required:
              - id
            type: object
            properties:
              id:
                type: string
        state:
          type: integer
          description: '1=Enabled, 2=Disabled'
          enum:
            - 1
            - 2
    reactivePolicyList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/reactivePolicy'
    reactivePolicyMethods:
      type: object
      properties:
        items:
          type: array
          items:
            type: integer
    reactivePolicyResponse:
      type: object
      properties:
        items:
          $ref: '#/components/schemas/reactivePolicy'
    nextBatch:
      type: object
      properties:
        nextBatchTime:
          type: integer
          format: int64
    orderedReactivePoliciesList:
      type: object
      properties:
        orderedReactivePolicies:
          type: array
          items:
            $ref: '#/components/schemas/reactivePolicy'
        srcAssetInfo:
          $ref: '#/components/schemas/asset'
        dstAssetInfo:
          $ref: '#/components/schemas/asset'
    portSummary:
      type: object
      properties:
        count:
          type: integer
        port:
          type: object
          properties:
            protocol:
              type: integer
            port:
              type: integer
    processSummary:
      type: object
      properties:
        count:
          type: integer
        name:
          type: string
    protectionPolicy:
      type: object
      properties:
        id:
          type: string
        groupId:
          type: string
        initialProtectAt:
          $ref: '#/components/schemas/timestamp'
        minQueueDays:
          type: integer
        createdBy:
          $ref: '#/components/schemas/createdBy'
        createdAt:
          $ref: '#/components/schemas/timestamp'
        updatedAt:
          $ref: '#/components/schemas/timestamp'
        groupInfo:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            domain:
              type: string
            hasProtectionPolicy:
              type: boolean
    protectionPolicyBody:
      type: object
      required:
        - groupId
        - initialQueueDays
        - minQueueDays
      properties:
        groupId:
          type: string
        description:
          type: string
        initialQueueDays:
          type: integer
          minimum: 0
          maximum: 30
          default: 30
        minQueueDays:
          type: integer
          minimum: 0
          maximum: 30
          default: 30
    protectionPolicyResponse:
      type: object
      properties:
        items:
          $ref: '#/components/schemas/protectionPolicy'
    protectionPolicyUpdateBody:
      type: object
      properties:
        minQueueDays:
          type: integer
          minimum: 0
          maximum: 30
          default: 30
    protectionPoliciesList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/protectionPolicy'
    queueBody:
      type: object
      properties:
        items:
          type: array
          items:
            type: string
        queueDays:
          type: integer
          description: number of days
          enum: [14,30]
    queueExtendBody:
      type: object
      properties:
        items:
          type: array
          items:
            type: string
        extendByDays:
          type: integer
          description: number of days
          enum: [14,30]
    roleBody:
      type: object
      properties:
        role:
          type: integer
          description: '1 - Viewer, 2 - Admin'
    roleCandidatesList:
      type: object
      properties:
        items:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/group'
              - $ref: '#/components/schemas/user'
        scrollCursor:
          type: string
    rolesList:
      type: object
      properties:
        items:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/group'
              - $ref: '#/components/schemas/user'
        scrollCursor:
          type: string
    createdBy:
      type: object
      properties:
        createdBy:
          $ref: '#/components/schemas/idNamePair'
        enforcementSource:
          type: integer
          format: int32
        userRole:
          type: integer
          format: int32
    portsList:
      type: array
      items:
        type: object
        properties:
          ports:
            type: string
          protocolType:
            type: integer
            format: int32
    rule:
      type: object
      properties:
        action:
          type: integer
        createdAt:
          $ref: '#/components/schemas/timestamp'
        createdBy:
          $ref: '#/components/schemas/createdBy'
        description:
          type: string
        direction:
          type: integer
          format: int32
        excludedLocalIdsList:
          type: array
          items:
            type: string
        expiresAt:
          $ref: '#/components/schemas/timestamp'
        id:
          type: string
        localEntityId:
          type: string
        localProcessesList:
          type: array
          items:
            type: string
        parentId:
          type: string
        parentType:
          type: integer
          format: int32
        portsList:
          $ref: '#/components/schemas/portsList'
        remoteEntityIdsList:
          type: array
          items:
            type: string
        state:
          type: integer
          format: int32
        updatedAt:
          $ref: '#/components/schemas/timestamp'
        updatedBy:
          $ref: '#/components/schemas/idNamePair'
    ruleBody:
      required:
        - expiresAt
        - localEntityId
        - localProcessesList
        - portsList
        - remoteEntityIdsList
        - state
      type: object
      properties:
        description:
          type: string
        expiresAt:
          type: integer
          format: int32
          example: 0
        localEntityId:
          type: string
        localProcessesList:
          type: array
          items:
            type: string
        portsList:
          $ref: '#/components/schemas/portsList'
        remoteEntityIdsList:
          type: array
          items:
            type: string
        state:
          type: integer
          description: '1=Enabled, 2=Disabled'
          enum:
            - 1
            - 2
    ruleDistribution:
      type: array
      items:
        $ref: '#/components/schemas/distribution'
    ruleItem:
      type: object
      properties:
        items:
          $ref: '#/components/schemas/rule'
    rulesList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/rule'
    ruleResponse:
      type: object
      properties:
        item:
          $ref: '#/components/schemas/rule'
    historyRule:
      type: object
      properties:
        id:
          type: string
        portsList:
          $ref: '#/components/schemas/portsList'
        expiresAt:
          type: integer
          format: int32
        createdAt:
          $ref: '#/components/schemas/timestamp'
        description:
          type: string
        remoteEntityInfos:
          type: array
          items:
            $ref: '#/components/schemas/idNamePair'
        localEntityInfo:
          $ref: '#/components/schemas/idNamePair'
        localProcessesList:
          type: array
          items:
            type: string
        createdBy:
          type: object
          properties:
            createdBy:
              $ref: '#/components/schemas/idNamePair'
            enforcementSource:
              type: integer
              format: int32
    srcUserCandidate:
      type: object
      properties:
        domain:
          type: string
        id:
          type: string
        name:
          type: string
    srcUserCandidatesList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/srcUserCandidate'
        scrollCursor:
          type: string
    state:
      type: object
      properties:
        assetId:
          type: string
        isAssetConnected:
          type: boolean
        lasDisconnectedAt:
          type: integer
          description: epoch timestamp
        protectAt:
          $ref: '#/components/schemas/timestamp'
        protectionState:
          type: integer
          format: int32
          enum:
            - 1
            - 3
            - 5
    user:
      type: object
      properties:
        createdAt:
          $ref: '#/components/schemas/timestamp'
        distinguishedName:
          type: string
        domain:
          type: string
        email:
          type: string
        firstName:
          type: string
        guid:
          type: string
        id:
          type: string
        jobTitle:
          type: string
        lastLogon:
          $ref: '#/components/schemas/timestamp'
        lastName:
          type: string
        name:
          type: string
        officePhone:
          type: string
        phone:
          type: string
        role:
          type: integer
        sid:
          type: string
        source:
          type: integer
        userPrincipleName:
          type: string
    usersList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/user'
    userSummary:
      type: object
      properties:
        count:
          type: integer
        id:
          type: string
        name:
          type: string
    otAssetBody:
      type: object
      title: otAssetBody
      properties:
        ipv4:
          type: string
          format: ipv4
        type:
          type: number
          enum:
            - 4
            - 5
            - 6
            - 7
            - 8
            - 9
            - 10
            - 11
            - 12
            - 13
            - 14
            - 15
            - 16
            - 17
            - 18
            - 19
            - 20
            - 21
            - 22
            - 23
            - 24
            - 25
            - 26
            - 27
            - 28
            - 29
            - 30
        displayName:
          type: string
      required:
        - ipv4
        - type
        - displayName
    customGroupBody:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        membersId:
          description: members id
          type: array
          items:
            type: string
            pattern: '^g:[c]:[a-zA-Z0-9]{8}$'
          example: 'g:c:ab124as21'
    customGroupMembersBody:
      type: object
      required:
        - membersId
      properties:
        membersId:
          description: members id
          type: array
          items:
            type: string
            pattern: '^g:[c]:[a-zA-Z0-9]{8}$'
          example: 'g:c:ab124as21'
    assetsStatistics:
      type: object
      x-examples:
        example-1:
          item:
            totalCount: 82
            deletedCount: 2
            protectedCount: 31
            queuedCount: 2
            monitoredCount: 37
            protectedDueToProtectionPolicyCount: 0
            queuedDueToProtectionPolicyCount: 0
            forcedUnprotectedCount: 0
            removingProtectionCount: 1
            forceRemovingProtectionCount: 0
            addingProtectionCount: 3
            forceAddingProtectionCount: 6
            notProtectedLink:
              - id: protectionStatus
                includeValues:
                  - '1'
                  - '6'
              - id: status
                excludeValues:
                  - '3'
      properties:
        item:
          type: object
          properties:
            totalCount:
              type: integer
            deletedCount:
              type: integer
            protectedCount:
              type: integer
            queuedCount:
              type: integer
            monitoredCount:
              type: integer
            protectedDueToProtectionPolicyCount:
              type: integer
            queuedDueToProtectionPolicyCount:
              type: integer
            forcedUnprotectedCount:
              type: integer
            removingProtectionCount:
              type: integer
            forceRemovingProtectionCount:
              type: integer
            addingProtectionCount:
              type: integer
            forceAddingProtectionCount:
              type: integer
            notProtectedLink:
              type: array
              items:
                $ref: '#/components/schemas/requestedFilter'
    requestedFilter:
      title: requestedFilter
      type: object
      properties:
        id:
          type: string
        excludeValues:
          type: array
          items:
            type: string
        includeValues:
          type: array
          items:
            type: string
      required:
        - id
    assetsStatesStatistics:
      type: object
      properties:
        reactivePoliciesStatistics:
          type: object
          properties:
            totalCount:
              type: integer
      x-examples:
        example-1:
          reactivePoliciesStatistics:
            totalCount: 13
    userStatistics:
      type: object
      properties:
        userStatistics:
          type: object
          properties:
            totalCount:
              type: integer
            adminsCount:
              type: integer
            viewersCount:
              type: integer
      x-examples:
        example-1:
          userStatistics:
            totalCount: 87
            adminsCount: 14
            viewersCount: 6
    groupsStatistics:
      type: object
      properties:
        groupStatistics:
          type: object
          properties:
            adGroupsCount:
              type: integer
            customGroupsCount:
              type: integer
            protectionPoliciesCount:
              type: integer
      x-examples:
        example-1:
          groupStatistics:
            adGroupsCount: 106
            customGroupsCount: 1
            protectionPoliciesCount: 2
    ruleStatistics:
      type: object
      properties:
        aiStatistics:
          $ref: '#/components/schemas/ruleStatisticsType'
        mfaStatistics:
          $ref: '#/components/schemas/ruleStatisticsType'
        sspStatistics:
          $ref: '#/components/schemas/ruleStatisticsType'
        portalStatistics:
          $ref: '#/components/schemas/ruleStatisticsType'
    ruleStatisticsType:
      type: object
      properties:
        inboundAllowEnabledCount:
          type: integer
        inboundAllowDisabledCount:
          type: integer
        inboundBlockEnabledCount:
          type: integer
        inboundBlockDisabledCount:
          type: integer
        outboundAllowEnabledCount:
          type: integer
        outboundAllowDisabledCount:
          type: integer
        outboundBlockEnabledCount:
          type: integer
        outboundBlockDisabledCount:
          type: integer
    reactivePoliciesStatistics:
      type: object
      properties:
        reactivePoliciesStatistics:
          type: object
          properties:
            totalCount:
              type: integer
    reactivePolicyDistribution:
      type: object
      properties:
        mfaDistribution:
          type: array
          items:
            type: object
            properties:
              timestamp:
                $ref: '#/components/schemas/timestamp'
              approved:
                type: integer
              rejected:
                type: integer
      x-examples:
        example-1:
          mfaDistribution:
            - timestamp: 1654905600000
              approved: 0
              rejected: 0
            - timestamp: 1654992000000
              approved: 5
              rejected: 0
            - timestamp: 1655078400000
              approved: 7
              rejected: 0
            - timestamp: 1655164800000
              approved: 13
              rejected: 0
            - timestamp: 1655251200000
              approved: 7
              rejected: 0
            - timestamp: 1655337600000
              approved: 2
              rejected: 0
            - timestamp: 1655424000000
              approved: 6
              rejected: 0
            - timestamp: 1655510400000
              approved: 0
              rejected: 0
            - timestamp: 1655596800000
              approved: 1
              rejected: 0
            - timestamp: 1655683200000
              approved: 7
              rejected: 0
            - timestamp: 1655769600000
              approved: 3
              rejected: 0
            - timestamp: 1655856000000
              approved: 7
              rejected: 0
            - timestamp: 1655942400000
              approved: 4
              rejected: 0
            - timestamp: 1656028800000
              approved: 4
              rejected: 0
            - timestamp: 1656115200000
              approved: 0
              rejected: 0
            - timestamp: 1656201600000
              approved: 2
              rejected: 0
            - timestamp: 1656288000000
              approved: 4
              rejected: 0
            - timestamp: 1656374400000
              approved: 8
              rejected: 0
            - timestamp: 1656460800000
              approved: 7
              rejected: 0
            - timestamp: 1656547200000
              approved: 9
              rejected: 0
            - timestamp: 1656633600000
              approved: 3
              rejected: 0
            - timestamp: 1656720000000
              approved: 0
              rejected: 0
            - timestamp: 1656806400000
              approved: 4
              rejected: 1
            - timestamp: 1656892800000
              approved: 2
              rejected: 0
            - timestamp: 1656979200000
              approved: 3
              rejected: 0
            - timestamp: 1657065600000
              approved: 16
              rejected: 2
            - timestamp: 1657152000000
              approved: 17
              rejected: 0
            - timestamp: 1657238400000
              approved: 13
              rejected: 0
            - timestamp: 1657324800000
              approved: 0
              rejected: 0
            - timestamp: 1657411200000
              approved: 3
              rejected: 0
            - timestamp: 1657497600000
              approved: 4
              rejected: 0
    settingsAuthBody:
      title: settingsAuthBody
      type: object
      properties:
        portalTokenTtl:
          type: number
          description: Portal session token timeout (in minutes)
    validateResponse:
      type: object
      properties:
        affectedAssetsCount:
          type: integer
  parameters:
    connectionStateParameter:
      name: connectionstate
      in: query
      description: connnection state for the query
      schema:
        type: integer
      example: 1
    cursorParameter:
      name: _cursor
      in: query
      description: cursor position to start at epoch(ms)
      schema:
        pattern: '^\d{13}$'
        type: integer
        format: int64
      example: 1647305853366
    directionParameter:
      name: direction
      in: query
      description: direction for the query
      schema:
        type: string
      example: outgoing
    entityIdParameter:
      name: entityId
      in: path
      description: entityId to filter on
      required: true
      schema:
        type: string
    entityIdQueryParameter:
      name: _entityId
      in: query
      description: entityId to filter on
      schema:
        type: string
    exportIdParameter:
      name: exportId
      in: path
      description: exportId to download
      required: true
      schema:
        type: string
    filtersParameter:
      name: _filters
      in: query
      description: JSON string URI encoded set of fiters
      schema:
        type: string
    fromParameter:
      name: from
      in: query
      description: startTime in epoch(ms)
      schema:
        pattern: '^\d{13}$'
        type: integer
      example: 1647308838000
    includeNestedMembersQueryParameter:
      name: includeNestedMembers
      in: query
      description: include nested members in the result
      required: true
      schema:
        type: boolean
    ipParameter:
      name: ip
      in: query
      required: true
      schema:
        type: string
        pattern: "[0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}"
    ipRangeParameter:
      name: ipRange
      in: query
      required: true
      schema:
        type: string
        example: "1.1.1.1-1.1.1.2"
        pattern: "[0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}-[0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}"
    ipSubnetParameter:
      name: subnet
      in: query
      required: true
      schema:
        type: string
        example: 192.168.1.0/24
        pattern: "[0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}/[0-9]{1,3}"
    limitParameter:
      name: _limit
      in: query
      required: true
      schema:
        maximum: 400
        minimum: 1
        type: integer
        default: 30
    offsetParameter:
      name: _offset
      in: query
      schema:
        maximum: 1000000000
        minimum: 0
        type: integer
        default: 0
    orderParameter:
      name: order
      in: query
      schema:
        type: string
        default: desc
        enum:
          - asc
          - desc
    reactivePolicyIdParameter:
      name: reactivePolicyId
      in: path
      description: The id of the MFA policy
      required: true
      schema:
        type: string
    ruleDirectionParameter:
      name: ruleDirection
      in: query
      description: direction of the rule (1-Inbound, 2-Outbound)
      required: true
      schema:
        type: integer
    ruleIdParameter:
      name: ruleId
      in: path
      description: The id of the rule
      required: true
      schema:
        type: string
    updateIdParameter:
      name: updateId
      in: query
      description: version
      required: true
      schema:
        type: integer
    roleEntityIdParameter:
      name: roleEntityId
      in: path
      description: The id of the user
      required: true
      schema:
        type: string
    searchParameter:
      name: _search
      in: query
      schema:
        type: string
    simulationParameter:
      name: simulationParams
      in: query
      required: true
      schema:
        type: object
        properties:
          srcAssetId:
            type: string
          srcUserId:
            type: string
          srcProcess:
            type: string
          dstAssetId:
            type: string
          dstProcess:
            type: string
          protocolType:
            type: string
          port:
            type: string
    sortParameter:
      name: sort
      in: query
      description: sort for the query
      schema:
        type: string
      example: occurred_desc
    toParameter:
      name: to
      in: query
      description: endTime in epoch(ms)
      schema:
        pattern: '^\d{13}$'
        type: integer
      example: 1647305854366
    groupIdParameter:
      name: groupId
      in: path
      description: members id
      required: true
      schema:
        type: string
        pattern: '^g:[acs]:[a-zA-Z0-9]{8}$'
    groupIdQueryParameter:
      name: _groupId
      in: query
      description: groupId to filter on
      schema:
        type: string
        pattern: '^g:[acs]:[a-zA-Z0-9]{8}$'
    entityParams:
      name: entityParams
      in: query
      required: false
      schema:
        type: string
      description: 'JSON string URI encoded object {id: string, direction: AssetDirection, scope: AssetScope}'
  securitySchemes:
    api_key:
      type: apiKey
      name: Authorization
      in: header
